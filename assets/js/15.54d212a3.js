(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{186:function(n,t,e){"use strict";e.r(t);var r=e(0),i=Object(r.a)({},function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("div",{staticClass:"content"},[n._m(0),n._v(" "),n._m(1),n._v(" "),e("p",[n._v("自从前段时间开发一个小程序项目和录音这个功能邂逅之后，到今日仍久久不能忘怀。总感觉应该记录点神马，来描述我们之间的故事。说着，那就走起！")]),n._v(" "),e("p",[n._v("或许应该先展示下效果比较合适，嗯，没毛病！")]),n._v(" "),n._m(2),n._v(" "),e("p",[n._v("因为为了让录音到播放以及播放暂停等各个环节效果清晰呈现，我用此替代掉了微信播放语音的那种展现形式，其实原理是一样的。那下面就对实现的过程展开轻描淡写。")]),n._v(" "),n._m(3),n._v(" "),n._m(4),n._v(" "),n._m(5),n._v(" "),e("p",[n._v("上面罗列的"),e("code",[n._v("api")]),n._v("都是需要用到的，顺序也基本是按照实现一个录音功能的全流程来排列的，那下面就采用贴代码的方式（最熟悉的方式）来阐述吧，对了，我用的是 mpvue（vue 语法）为了避免篇幅较长，核心代码片段只贴出 js 实现，demo 完整代码请 "),e("a",{attrs:{href:"https://github.com/HUYIJUNCODING/recoder-miniprogram",target:"_blank",rel:"noopener noreferrer"}},[n._v("猛戳这里"),e("OutboundLink")],1),n._v(" 获取。")]),n._v(" "),n._m(6),n._m(7),n._v(" "),n._m(8),n._v(" "),n._m(9)])},[function(){var n=this.$createElement,t=this._self._c||n;return t("h2",{attrs:{id:"微信小程序-录音"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微信小程序-录音","aria-hidden":"true"}},[this._v("#")]),this._v(" 微信小程序-录音")])},function(){var n=this.$createElement,t=this._self._c||n;return t("h3",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[this._v("#")]),this._v(" 前言")])},function(){var n=this.$createElement,t=this._self._c||n;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/11/24/16e9dba94c52234c?w=624&h=1020&f=gif&s=4479534",alt:""}})])},function(){var n=this.$createElement,t=this._self._c||n;return t("h4",{attrs:{id:"api-准备"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#api-准备","aria-hidden":"true"}},[this._v("#")]),this._v(" API 准备")])},function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ul",[e("li",[n._v("初始化音频管理器"),e("br"),n._v(" "),e("code",[n._v("wx.getRecorderManager()")]),e("br"),n._v(" "),e("code",[n._v("返回 RecorderManager对象")])]),n._v(" "),e("li",[n._v("创建内部 audio 上下文对象"),e("br"),n._v(" "),e("code",[n._v("wx.createInnerAudioContext()")])]),n._v(" "),e("li",[n._v("开始录音"),e("br"),n._v(" "),e("code",[n._v("RecorderManager.start(Object object)")])]),n._v(" "),e("li",[n._v("停止录音"),e("br"),n._v(" "),e("code",[n._v("RecorderManager.stop()")])]),n._v(" "),e("li",[n._v("监听录音结束事件"),e("br"),n._v(" "),e("code",[n._v("RecorderManager.onStop(function callback)")])]),n._v(" "),e("li",[n._v("播放录音"),e("br"),n._v(" "),e("code",[n._v("InnerAudioContext.play()")])]),n._v(" "),e("li",[n._v("停止播放录音（停止后的音频再播放会从头开始播放）"),e("br"),n._v(" "),e("code",[n._v("InnerAudioContext.stop()")])]),n._v(" "),e("li",[n._v("监听音频自然播放至结束的事件"),e("br"),n._v(" "),e("code",[n._v("InnerAudioContext.onEnded(function callback)")])]),n._v(" "),e("li",[n._v("销毁当前音频上下文实例"),e("br"),n._v(" "),e("code",[n._v("innerAudioContext.destroy()")])]),n._v(" "),e("li",[n._v("其他"),e("br"),n._v(" "),e("code",[n._v("获取录音权限 wx.getSetting()")]),e("br"),n._v(" "),e("code",[n._v("上传七牛云 qiniuUploader.upload")]),e("br")])])},function(){var n=this.$createElement,t=this._self._c||n;return t("h4",{attrs:{id:"实现步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现步骤","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现步骤")])},function(){var n=this.$createElement,t=this._self._c||n;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('\x3c!--recoder.vue--\x3e\n<template>\n   ...\n</template>\n<script>\nimport { Base64 } from \'js-base64\'; //引入安装的Base64依赖包，不是必须,如果用到七牛云上传则是必须的，因为token会过期，它可以检测token有效期\nconst qiniuUploader = require("../../utils/qiniuUploader");//引入七牛云上传源码\nexport default {\n    props: {},\n    components: {},\n    data() {\n        return {\n            audioValue: "", //录音内容\n            duration: 0, //录音时长\n            recodeStatus: 0, //录音状态 0:未录音,1:正在录音2:录音完成\n            playStatus: 0, //播放状态 0:未播放,1:正在播放\n            recoderAuthStatus: false //录音授权状态\n        };\n    },\n    methods: {\n        //调用recorderManager.start开始录音\n        recorderManagerStart() {\n            this.recorderManager.start({\n                format: "mp3",\n                duration: 60000\n            });\n            this.recodeStatus = 1;\n        },\n        //开始录音\n        startRecorder(index) {\n            let that = this;\n            if (this.recoderAuthStatus) {\n                this.recorderManagerStart();\n            } else {\n                wx.openSetting({\n                    success(res) {\n                        if (res.authSetting["scope.record"]) {\n                            that.recoderAuthStatus = true;\n                            that.recorderManagerStart();\n                        }\n                    }\n                });\n            }\n        },\n\n        //结束录音\n        stopRecorder(index) {\n            this.recodeStatus = 2;\n            this.recorderManager.stop();\n        },\n        //播放录音\n        playVoice(index) {\n            if (this.playStatus == 0) {\n                //未播放状态则点击播放\n                if (!this.audioValue) {\n                    this.tip("请先录音！");\n                    return;\n                }\n                this.playStatus = 1;\n                this.innerAudioContext.src = this.audioValue;\n                this.innerAudioContext.play();\n            } else {\n                //正在播放状态,则点击暂停\n                this.playStatus = 0;\n                this.innerAudioContext.stop();\n            }\n        },\n        //删除录音，各属性，状态值init\n        removeRecoder(index) {\n            this.audioValue = "";\n            this.recodeStatus = 0;\n            this.playStatus = 0;\n            this.duration = 0;\n        },\n        //获取权限设置\n        getAuthSetting() {\n            let that = this;\n            wx.getSetting({\n                success(res) {\n                    if (!res.authSetting["scope.record"]) {\n                        wx.authorize({\n                            scope: "scope.record",\n                            success() {\n                                that.recoderAuthStatus = true;\n                            },\n                            fail() {\n                                that.recoderAuthStatus = false;\n                            }\n                        });\n                    } else {\n                        that.recoderAuthStatus = true;\n                    }\n                }\n            });\n        },\n\n        //格式化录音时间\n        fmtRecoderTime(duration = 0) {\n            duration = duration / 1000;\n            const seconds = duration.toString().split(".")[0]; //取秒\n            return seconds;\n        },\n\n        //提示弹窗\n        tip(msg) {\n            wx.showModal({\n                title: "提示",\n                content: msg,\n                showCancel: false\n            });\n        },\n        //上传音频\n        uploadAudio(filePath, success) {\n            // 交给七牛上传\n            qiniuUploader.upload(\n                filePath,\n                res => {\n                    let audioUrl = res.domain + res.truekey; //上传返回的url链接\n                    return (\n                        typeof success === "function" &&\n                        success({ audio: audioUrl })\n                    );\n                },\n                error => {\n                    console.log("error: " + error);\n                },\n                {\n                    region: "ECN", // 华东区\n                    uptokenURL: "https://xxx/qiniu/uploadToken", //上传地址,需要后台配置\n                    shouldUseQiniuFileName: false\n                }\n                // Base64 //一般token都是有时效的,Base64可以解析当前token的到期时间,判断是否过期从而更新令牌\n            );\n        },\n        //初始化音频管理器\n        initRecorderManager() {\n            const recorderManager = wx.getRecorderManager();\n            recorderManager.onError(() => {});\n            //结束播放语音\n            recorderManager.onStop(res => {\n                const duration = this.fmtRecoderTime(res.duration); //获取录音时长\n                //小程序录音最长1分钟(60秒)\n                if (duration > 60) {\n                    this.tip(\'录音时间不能超过60"\');\n                    this.recodeStatus = 2; //结束\n                    return;\n                } else if (duration < 1) {\n                    this.duration = 1; //不计,未开始\n                    return;\n                }\n                this.duration = duration;\n             //  this.audioValue = res.tempFilePath;(这里是录音本地文件，如果需要在其他地方播放，则需要上传转换成网络链接)\n\n                //上传本地音频\n                 this.uploadAudio(res.tempFilePath, src => {\n                     this.audioValue = src.audio;\n                 });\n            });\n            this.recorderManager = recorderManager;\n\n            //创建内部 audio 上下文 InnerAudioContext 对象。\n            const innerAudioContext = wx.createInnerAudioContext();\n            //监听音频自然播放至结束的事件\n            innerAudioContext.onEnded(() => {\n                //音频自然播放至结束的事件的回调函数\n                this.playStatus = 0; //播放状态重置为未开始\n            });\n            innerAudioContext.onError(res => {});\n            this.innerAudioContext = innerAudioContext;\n        },\n        //销毁当前组件音频实例\n        destoryInnerAudioContext() {\n            this.innerAudioContext.destroy();\n            console.log("音频实例销毁啦");\n        }\n    },\n    computed: {},\n    watch: {},\n    onLoad() {\n        //判断是否已授权录音权限\n        this.getAuthSetting();\n        //初始化音频管理器\n        this.initRecorderManager();\n    },\n    onUnload() {\n        this.destoryInnerAudioContext();//销毁当前音频上下文实例\n    }\n};\n<\/script>\n')])])])},function(){var n=this.$createElement,t=this._self._c||n;return t("ul",[t("li",[this._v("以上基本就是实现一个录音->播放的全过程了，基本注释在代码中都有体现，因此也没有像以往那样进行逐步分析。其实本身小程序基本帮我们把需求实现需要用到的功能都封装成了相应的"),t("code",[this._v("api")]),this._v("，应该说使用起来还是很方便和简单的，唯一可能就是"),t("code",[this._v("api")]),this._v("众多，可能在使用的时候不知所措该用哪一个最合适，所以，以上实现的"),t("code",[this._v("api")]),this._v("也不一定是最合适的，因此，各位大佬如有更好的实现方式，请不吝赐教，互相分享，共同进步！")])])},function(){var n=this.$createElement,t=this._self._c||n;return t("h4",{attrs:{id:"后记"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#后记","aria-hidden":"true"}},[this._v("#")]),this._v(" 后记")])},function(){var n=this.$createElement,t=this._self._c||n;return t("p",[t("code",[this._v("其实，这个世界哪有什么岁月静好，只不过有人替你负重前行罢了，加油，骚年！")])])}],!1,null,null,null);t.default=i.exports}}]);