(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{187:function(t,e,n){"use strict";n.r(e);var a=n(0),s=Object(a.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),n("p",[t._v("因项目需求，最近使用 taro，开发了一款应用于票务商品购票的价格日历，感觉这个东西的应用还是比较多的，因此，就分享出来，关公门前耍个大刀，路过的大佬们手下留情哦！")]),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),n("p",[t._v("为了响应国家号召，节能减排，小弟就将一些边缘的逻辑和样式省略，重点分享日历这部分的逻辑，完整代码请 "),n("a",{attrs:{href:"https://github.com/HUYIJUNCODING/calendar-taro",target:"_blank",rel:"noopener noreferrer"}},[t._v("猛戳"),n("OutboundLink")],1),t._v(" 这里。")]),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),n("p",[t._v("以上就是 calendar 组件实现的核心代码，虽然功能比较简单，但实现的过程中细节逻辑感觉还是挺多的，也是费了些时间去思考细节。因此分享出来，共同进步。如有错误，望大佬们多多指正。")])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"taro中开发小程序价格日历"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#taro中开发小程序价格日历","aria-hidden":"true"}},[this._v("#")]),this._v(" taro中开发小程序价格日历")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[this._v("#")]),this._v(" 前言")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("先预览下效果")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/11/28/16eb1e0cbfde0530?w=648&h=1050&f=gif&s=5232579",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"实现思路分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现思路分析","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现思路分析")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("code",[t._v("ticketPriceList(设置有价格日期等信息的商品集合)")]),t._v("通过"),n("code",[t._v("props")]),t._v("传递进"),n("code",[t._v("calendar")]),t._v("组件，"),n("code",[t._v("calendar")]),t._v("组件中"),n("code",[t._v("initDate")]),t._v("方法对日历数据进行初始化（初始化日期显示数据，该方法会在组件初始化时先调用一次），同时遍历"),n("code",[t._v("ticketPriceList")]),t._v("，通过匹配两者日期是否相等来将有价格的日期同步到日历上显示。通过调用"),n("code",[t._v("prevMonth")]),t._v("和"),n("code",[t._v("nextMonth")]),t._v("来切换显示的月份，最终同样调用"),n("code",[t._v("initDate")]),t._v("来更新日历显示的数据。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"实现代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现代码","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现代码")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("\x3c!--calendar组件--\x3e\n\nimport Taro, {\n    Component\n} from '@tarojs/taro'\nimport { View, Image } from '@tarojs/components'\n\nimport './index.scss'\n\nexport default class SkuSelector extends Component {\n    //props default\n    static defaultProps = {\n        ticketPriceList: []\n    };\n    constructor(props) {\n        super(props);\n        this.state = {\n            date: new Date(), //获取系统日期\n            currentDate: '', //当前选择的日期\n            selectMonth: '', //选择的月份\n            weeks: ['日', '一', '二', '三', '四', '五', '六'],\n            color: '#fff',//选中日期文字颜色\n            bgColor: 'f5f6f7',//非今日的日期背景色\n            dayArr: [], //月份天数\n            year: '', //当前选择的年\n            month: '', //当前选择的月\n            status: 1, //1:属于当月的天,0:属于上月2:属于下月\n            prevMonthStatus: false,//返回上个月按钮禁用状态,false:禁用,true,不禁用\n        }\n    }\n\n    //时间格式 xxxx-xx-xx 转时间戳\n    fmtDate(date) {\n        let dateStamp = new Date(date.replace(/-/g, '/'));\n        return dateStamp.getTime()\n    }\n\n    //设置有效的日期范围\n    setValidDate(dateObj) {\n        const currentDateStamp = this.fmtDate(dateObj.sellDate);//当前传入日期时间戳\n        const startDateStamp = this.fmtDate(this.props.ticketPriceList[0].sellDate);//设定价格的票券起始日期时间戳\n        const endDateStamp = this.fmtDate(this.props.ticketPriceList[this.props.ticketPriceList.length - 1].sellDate)///设定价格的票券结束日期时间戳\n        if (currentDateStamp >= startDateStamp && currentDateStamp <= endDateStamp) {\n            if (dateObj.marketAmount && dateObj.dailyStock > 0) {//有效的日期(可点击)\n                dateObj.ban = 1;//可选状态\n                dateObj.color = '#666';\n            } else if (dateObj.marketAmount && dateObj.dailyStock <= 0) {//已售罄\n                dateObj.bgColor = '#999';\n                dateObj.color = '#333';\n                dateObj.ban = 3;//已售罄\n            }\n\n        }\n    }\n\n    //判断传入时间跟当日时间大小,返回值为两者差值\n    checkValidDate(date) {\n        let localYear = this.state.date.getFullYear()\n        let localMonth = this.state.date.getMonth() + 1\n        let day = this.state.date.getDate()\n        let localDate = this.formatNum(localYear) + '-' + this.formatNum(localMonth) + '-' + this.formatNum(day)//当日完整日期:'xxxx-xx-xx'\n        const currentDateStamp = this.fmtDate(date);//当前传入日期时间戳\n        const localDateStamp = this.fmtDate(localDate)//当日时间戳\n        return currentDateStamp - localDateStamp\n\n\n    }\n\n    //初始化日期\n    initDate(year, month) {\n        return new Promise(resolve => {\n            let weekValue = '';\n            let totalDay = new Date(year, month + 1, 0).getDate()//获取当前所选择月份总天数\n            this.setState({\n                selectMonth: month + 1,\n                dayArr: []\n            }, () => {\n                //获取并填充当前所查询年份对应月份数据\n                for (let i = 1; i <= totalDay; i++) {\n                    let dayDate = this.formatNum(year) + '-' + this.formatNum(month + 1) + '-' + this.formatNum(i);\n                    let obj = {\n                        sellDate: dayDate,\n                        day: i,\n                        marketAmount: '',//零售价\n                        storeAmount: '',//门市价\n                        dailyStock: '',//库存\n                        bgColor: 'none',\n                        color: '#ccc',\n                        status: 1, //当月的天\n                        ban: 2//1:正常,2:禁用,3:售罄\n                    }\n\n                    weekValue = (new Date(year, month, i)).getDay(); //获取这天对应的是星期几 0 - 6,0 表示星期天\n                    if (i == 1 && weekValue != 0) {\n                        this.addBeforeValue(weekValue)//填充日历开始的空白,\n                    }\n\n                    let index = this.props.ticketPriceList.findIndex((item) => {\n                        return item.sellDate == dayDate //匹配设置价格的天,并返回其索引\n                    })\n                    if (index >= 0) {\n                        obj.marketAmount = this.props.ticketPriceList[index].marketAmount;//将价格赋值给日历中匹配到的项\n                        obj.dailyStock = this.props.ticketPriceList[index].dailyStock;\n                        obj.storeAmount = this.props.ticketPriceList[index].storeAmount;\n                    }\n                    this.setValidDate(obj) //设置有效的日期范围\n                    let dayArr = this.state.dayArr;\n                    dayArr.push(obj)//将当前月的天push进数组\n                    this.setState({\n                        dayArr\n                    }, () => {\n                        if (i == totalDay && weekValue != 6) {\n                            this.addAfterValue(weekValue) //填充日历结尾的空白\n                        }\n                        resolve(true);\n                    })\n                }\n            })\n            //判断当前展示的月份跟本月关系,如果是当月则禁用返回上个月按钮\n            let dayDate = this.formatNum(year) + '-' + this.formatNum(month + 1) + '-' + this.formatNum(1);\n            if (this.checkValidDate(dayDate) <= 0) {\n                this.setState({\n                    prevMonthStatus: false\n                })\n            } else {\n                this.setState({\n                    prevMonthStatus: true\n                })\n            }\n        })\n    }\n\n    //补充前面空白日期\n    addBeforeValue(weekValue) {\n        let totalDay = new Date(this.state.year, this.state.month, 0).getDate();\n        for (let i = 0; i < weekValue; i++) {\n            let obj = {\n                sellDate: '',\n                day: '',\n                marketAmount: '',//零售价\n                storeAmount: '',//门市价\n                bgColor: 'none',\n                color: '#ccc',\n                status: 0,\n                ban: 2//禁用\n            }\n            // obj.day = totalDay - (weekValue - i) + 1;\n            let dayArr = this.state.dayArr;\n            dayArr.push(obj);\n            this.setState({\n                dayArr\n            })\n        }\n    }\n\n    //补充后空白日期\n    addAfterValue(weekValue) {\n        let totalDay = new Date(this.state.year, this.state.month, 0).getDate();\n        for (let i = 0; i < (6 - weekValue); i++) {\n            let obj = {\n                sellDate: '',\n                day: '',\n                marketAmount: '',//零售价\n                storeAmount: '',//门市价\n                bgColor: 'none',\n                color: '#ccc',\n                status: 2,\n                ban: 2//禁用\n            }\n            //  obj.day = i + 1;\n            let dayArr = this.state.dayArr;\n            dayArr.push(obj);\n            this.setState({\n                dayArr\n            })\n        }\n    }\n    //日期时间的格式化\n    formatNum(num) {\n        return num < 10 ? '0' + num : num + '';\n    }\n\n    //调用initDate方法\n    async callInitDateFunc(year, month) {\n        await this.initDate(year, month);\n        this.initInfo();\n    }\n    //上一个月\n    prevMonth() {\n        if (!this.state.prevMonthStatus) return\n        if (this.state.month == 0) {//1月\n            let year = this.state.year - 1;//需要返回到上一年\n            this.setState({\n                year,\n                month: 11//12月\n            }, () => {\n                this.callInitDateFunc(this.state.year, this.state.month);\n            })\n        } else {\n            let month = this.state.month - 1;\n            this.setState({\n                month\n            }, () => {\n                this.callInitDateFunc(this.state.year, this.state.month);\n            })\n        }\n\n    }\n    //下一个月\n    nextMonth() {\n        if (this.state.month == 11) {//12月\n            let year = this.state.year + 1;//到下一年\n            this.setState({\n                year,\n                month: 0//1月\n            }, () => {\n                this.callInitDateFunc(this.state.year, this.state.month);\n            })\n        } else {\n            let month = this.state.month + 1;\n            this.setState({\n                month\n            }, () => {\n                this.callInitDateFunc(this.state.year, this.state.month);\n            })\n        }\n\n    }\n    //输出当前点击项(选中的哪天)\n    handleClick(obj) {\n        //查询当前选中日期下标\n        let idx = this.state.dayArr.findIndex((item) => {\n            return item.sellDate == obj.sellDate\n        })\n        if (this.state.dayArr[idx].status == 0) {//如果点击日历开始的填充日期\n            this.setState({\n                status: 0\n            }, () => {\n                // this.prevMonth();//自动跳转上一个月\n            })\n            return;\n        }\n        if (this.state.dayArr[idx].status == 2) { //如果点击日历结尾的填充日期\n            this.setState({\n                status: 2\n            }, () => {\n                //  this.nextMonth();//自动跳转下一个月\n            })\n            return;\n        }\n        if (this.state.dayArr[idx].status == 1 && this.state.dayArr[idx].ban == 1) {//点击日历日期,并且为可点击状态\n            let dayArr = this.state.dayArr;\n            dayArr[idx].bgColor = '#FEB100';//设定选中日期的背景色\n            dayArr[idx].color = '#fff';//选中日期的文字颜色\n\n            //将日历其他可点击状态的日期文字重置为默认色\n            let count = 0;\n            for (let i = 0; i < this.state.dayArr.length; i++) {\n                if (this.state.dayArr[i].status == 1 && this.state.dayArr[i].ban == 1 && i != idx) {\n                    dayArr[i].bgColor = 'none';\n                    dayArr[i].color = '#666';\n                    count++;\n                }\n                if (count >= this.props.ticketPriceList.length) break;//说明已经全部重置完成,直接结束循环\n            }\n            this.setState({\n                dayArr\n            })\n            this.props.handleClick(obj)//返回当前点击的日期给父组件\n        }\n\n    }\n    //价格日历映射表(当前查询日期->价格日历 ,返回查询日期在价格日历的索引位置)\n    findTicketIndex(obj) {\n        let findDateObj = obj;\n        let index = this.state.dayArr.findIndex((item) => {\n            return item.sellDate == findDateObj.sellDate //返回其索引\n        })\n        return index;\n\n    }\n    //初始化商品信息\n    initInfo() {\n        const findIndex = this.findTicketIndex(this.props.currentSelectTicket);\n        if (findIndex !== -1) {\n            this.handleClick(this.state.dayArr[findIndex])\n        }\n    }\n\n    componentDidMount() {\n        let year = this.state.date.getFullYear(); //获取当前所在年份\n        let month = this.state.date.getMonth(); //获取当前所在月份 0-11\n        this.setState({\n            year,\n            month\n        }, async () => {\n            await this.initDate(this.state.year, this.state.month); //初始化日历数据\n            this.initInfo() //初始化当前商品价格等展示信息,该方法只在组件初始化的时候执行一次\n        })\n\n\n    }\n\n    render() {\n        const { year, selectMonth, dayArr, weeks, prevMonthStatus } = this.state\n        return (\n            <View className=\"calendar-selector-container\">\n                <View className=\"calendar-header\">\n                    <View className=\"header-left\" onClick={() => this.prevMonth()}>\n                        <Image className='left-arrow' src={prevMonthStatus ? 'http://static.ledouya.com/FkhXIKoqvceD_ieVbVlUWzM4X_PR' : 'http://static.ledouya.com/Fr3ECEFgaTuTbQPkPKLl-PA2eV8m'} />\n                        <Text className={['left-text', !prevMonthStatus && 'ban-text']}>上月</Text>\n                    </View>\n                    <View className=\"header-center\">{year + '年' + selectMonth}月</View>\n                    <View className=\"header-right\" onClick={() => this.nextMonth()}>\n                        <Text className=\"right-text\">下月</Text>\n                        <Image className=\"right-arrow\" src=\"http://static.ledouya.com/Fl7CcBEZszqiWTpfN0bKSB9NeZdX\" />\n                    </View>\n                </View>\n                <View className=\"calendar-week\">\n                    {\n                        weeks.map((v) => (\n                            <View className=\"list\">{v}</View>\n                        ))\n                    }\n\n                </View>\n                <View className=\"calendar-content\">\n                    <View className=\"calendar-day\">\n                        {dayArr.map((v, i) => (\n                            <View className=\"list\" onClick={() => this.handleClick(v)}>\n                                <View className={['day', v.ban == 3 && 'sell-out']} style={{ background: v.bgColor, color: v.color }}>{v.ban == 1 || v.ban == 2 ? v.day : '售罄'}</View>\n                                {v.ban == 1 && <View className=\"price\">¥{(parseFloat(v.marketAmount) / 100).toFixed(2)}</View>}\n                            </View>\n                        ))\n                        }\n                        <View className=\"local-month\">{selectMonth}</View>\n                    </View>\n                </View>\n            </View>\n        )\n    }\n}\n\n")])])])}],!1,null,null,null);e.default=s.exports}}]);